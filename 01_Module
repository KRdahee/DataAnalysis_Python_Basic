코드의 길이가 길어지는 상활. 이떄, 모든 함수, 변수를 구현하는 것은 불가능

--> 누군가는 만들어 놓은 함수, 변수 등을 활용하자!

[모듈] 
= 특정 목적을 가진 함수, 자료의 모임.

[모듈 사용하기]

1. import(불러오다) 키워드를 이용해서 모듈 사용

import random        #random 모듈 불러오기

[모듈 사용법 확인하기]

1. 모듈 속 사용하려는 함수/변(변할 수 있는 수)수의 사용법 확인

random,randrange(start,stop)
range(start,stop)중의 한 원소를 가지고 옵니다.

.(dot)을 쓴 후에 모듈 속 함수/변수 사용

import random

print(random.randrange(0,2))
# 0이상 2미만 수 중 임의로 출력.

우리가 원하는 내용이 담긴 모듈제작 가능. .py(파이썬 파일)로 만들 수 있다.
import my_module

[모듈 만들기]

1. py파일을 생성 루 함수와 변수를 만든다.
2. 다른 파일에서 만들어 둔 py파일을 불러온다.
#cal.py               #main.py
def plus(a,b):        import cal
  c = a + b
  return c
3. 불러온 모듈 속 함수, 변수를 활용한다.
# cal.py                    # main.py
def plus(a,b):              import cal
  c = a + b                 print(cal.plus(3.4))
  return c                  #7

ex) 계산기 모듈을 직접 만들어봅시다!
  1. cal.py 파일을 열고, a,b를 인자로 갖는 함수 plus, minus를 정의해봅니다.

  plus : a+b를 반환하는 함수
  minus : a-b를 반환하는 함수
  2. cal.py 파일에서 변수 modelName을 만들고 ‘ELI-C2’를 대입해봅시다.
  
  3. main.py 파일을 열고, import cal을 이용해 저장된 모듈 cal을 불러와봅시다.
  
  4. 변수 var1에 모듈 cal의 모델이름(modelName)을 넣어봅시다.
  
  5. 변수 var2에 모듈 cal의 plus 함수를 이용해서 3+4의 값을 넣어봅시다.
  
  6. 변수 var3에 모듈 cal의 minus 함수를 이용해서 7-2의 값을 넣어봅시다.
  
  7. var1, var2, var3의 값을 출력하여 확인해봅시다.
<main.py>
import cal

var1 = cal.modelName # cal.modelName을 var1에 저장하세요.

var2 = cal.plus(3, 4) # cal.plus를 활용하여 3+4를 구해보세요.

var3 = cal.minus(7, 2) # cal.minus를 활용하여 7-2를 구해보세요.

## 변수의 값을 확인하는 출력문입니다.
print(var1, var2, var3)

<cal.py>
def plus(a, b):
    return a+b # a+b 를 반환하세요.

def minus(a, b):
    return a-b # a-b 를 반환하세요.

modelName = 'ELI-C2' # "ELI-C2" 를 modelName에 저장하세요.
